{"ast":null,"code":"// Socket.io client setup for real-time updates\nimport { io } from 'socket.io-client';\nimport config from './config';\nlet socket = null;\nexport const initSocket = () => {\n  if (socket) return socket;\n\n  // Connect to the socket server using the URL from config\n  socket = io(config.socketUrl, {\n    transports: ['websocket', 'polling'],\n    autoConnect: true\n  });\n  socket.on('connect', () => {\n    console.log('Socket connected:', socket.id);\n  });\n  socket.on('disconnect', () => {\n    console.log('Socket disconnected');\n  });\n  socket.on('connect_error', error => {\n    console.error('Socket connection error:', error);\n  });\n  return socket;\n};\n\n// Join a project room to receive project-specific updates\nexport const joinProjectRoom = projectId => {\n  if (!socket) initSocket();\n  if (projectId) {\n    socket.emit('join-project', projectId);\n    console.log(`Joined project room: project-${projectId}`);\n  }\n};\n\n// Leave a project room when no longer needed\nexport const leaveProjectRoom = projectId => {\n  if (!socket) return;\n  if (projectId) {\n    socket.emit('leave-project', projectId);\n    console.log(`Left project room: project-${projectId}`);\n  }\n};\n\n// Get the socket instance\nexport const getSocket = () => {\n  if (!socket) return initSocket();\n  return socket;\n};\n\n// Disconnect socket when no longer needed (e.g., on logout)\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n    console.log('Socket disconnected and reference cleared');\n  }\n};","map":{"version":3,"names":["io","config","socket","initSocket","socketUrl","transports","autoConnect","on","console","log","id","error","joinProjectRoom","projectId","emit","leaveProjectRoom","getSocket","disconnectSocket","disconnect"],"sources":["/Users/sherlylanceh/ProjectManagement/bug-tracker/src/socket.js"],"sourcesContent":["// Socket.io client setup for real-time updates\nimport { io } from 'socket.io-client';\nimport config from './config';\n\nlet socket = null;\n\nexport const initSocket = () => {\n  if (socket) return socket;\n  \n  // Connect to the socket server using the URL from config\n  socket = io(config.socketUrl, {\n    transports: ['websocket', 'polling'],\n    autoConnect: true\n  });\n  \n  socket.on('connect', () => {\n    console.log('Socket connected:', socket.id);\n  });\n  \n  socket.on('disconnect', () => {\n    console.log('Socket disconnected');\n  });\n  \n  socket.on('connect_error', (error) => {\n    console.error('Socket connection error:', error);\n  });\n  \n  return socket;\n};\n\n// Join a project room to receive project-specific updates\nexport const joinProjectRoom = (projectId) => {\n  if (!socket) initSocket();\n  if (projectId) {\n    socket.emit('join-project', projectId);\n    console.log(`Joined project room: project-${projectId}`);\n  }\n};\n\n// Leave a project room when no longer needed\nexport const leaveProjectRoom = (projectId) => {\n  if (!socket) return;\n  if (projectId) {\n    socket.emit('leave-project', projectId);\n    console.log(`Left project room: project-${projectId}`);\n  }\n};\n\n// Get the socket instance\nexport const getSocket = () => {\n  if (!socket) return initSocket();\n  return socket;\n};\n\n// Disconnect socket when no longer needed (e.g., on logout)\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n    console.log('Socket disconnected and reference cleared');\n  }\n};"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,MAAM,MAAM,UAAU;AAE7B,IAAIC,MAAM,GAAG,IAAI;AAEjB,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,IAAID,MAAM,EAAE,OAAOA,MAAM;;EAEzB;EACAA,MAAM,GAAGF,EAAE,CAACC,MAAM,CAACG,SAAS,EAAE;IAC5BC,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;IACpCC,WAAW,EAAE;EACf,CAAC,CAAC;EAEFJ,MAAM,CAACK,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,MAAM,CAACQ,EAAE,CAAC;EAC7C,CAAC,CAAC;EAEFR,MAAM,CAACK,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EACpC,CAAC,CAAC;EAEFP,MAAM,CAACK,EAAE,CAAC,eAAe,EAAGI,KAAK,IAAK;IACpCH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD,CAAC,CAAC;EAEF,OAAOT,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMU,eAAe,GAAIC,SAAS,IAAK;EAC5C,IAAI,CAACX,MAAM,EAAEC,UAAU,CAAC,CAAC;EACzB,IAAIU,SAAS,EAAE;IACbX,MAAM,CAACY,IAAI,CAAC,cAAc,EAAED,SAAS,CAAC;IACtCL,OAAO,CAACC,GAAG,CAAC,gCAAgCI,SAAS,EAAE,CAAC;EAC1D;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAIF,SAAS,IAAK;EAC7C,IAAI,CAACX,MAAM,EAAE;EACb,IAAIW,SAAS,EAAE;IACbX,MAAM,CAACY,IAAI,CAAC,eAAe,EAAED,SAAS,CAAC;IACvCL,OAAO,CAACC,GAAG,CAAC,8BAA8BI,SAAS,EAAE,CAAC;EACxD;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,SAAS,GAAGA,CAAA,KAAM;EAC7B,IAAI,CAACd,MAAM,EAAE,OAAOC,UAAU,CAAC,CAAC;EAChC,OAAOD,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIf,MAAM,EAAE;IACVA,MAAM,CAACgB,UAAU,CAAC,CAAC;IACnBhB,MAAM,GAAG,IAAI;IACbM,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EAC1D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}